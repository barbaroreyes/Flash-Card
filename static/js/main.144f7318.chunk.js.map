{"version":3,"sources":["utils/api/index.js","Decks/Deck.js","Decks/DeckList.js","Decks/StudyCardLogic.js","Decks/StudyDeck.js","Layout/NotFound.js","Layout/Header.js","Decks/EditDeck.js","Decks/DisplayDeck.js","Cards/EditCard.js","Cards/AddCard.js","Decks/CreateDeck.js","Layout/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","cardId","updatedCard","Deck","useState","cardList","setCardList","history","useHistory","useEffect","then","d","find","d2","noOfCards","filter","length","className","description","to","type","title","onClick","window","confirm","go","DeckList","deckList","setDeckList","abortController","AbortController","abort","deckCardList","map","key","StudyCardLogic","props","validCards","flipped","setFlipped","selectedCard","setSelectedCard","back","nextCard","push","front","StudyDeck","selectedDeck","setSelectedDeck","useParams","aria-label","aria-current","append","NotFound","Header","EditDeck","handleChange","target","value","onSubmit","event","preventDefault","updateDeck","htmlFor","onChange","DisplayDeck","displayDeck","setDisplayDeck","deleteCardHandler","deleteCard","validCardList","index","EditCard","readCard","updateCard","AddCard","formData","setFormData","createCard","placeholder","required","CreateDeck","createDeckHandler","lastDeck","createDeck","Layout","path","newDeck","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.144f7318.chunk.js","sourcesContent":["/**\r\n * Defines the base URL for the API.\r\n * The default values is overridden by the `API_BASE_URL` environment variable.\r\n */\r\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\r\n\r\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\n/**\r\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param deck\r\n *  the deck instance\r\n * @returns {*}\r\n *  a copy of the deck instance with the `cards` property removed.\r\n */\r\nfunction stripCards(deck) {\r\n  const { cards, ...deckWithoutCards } = deck;\r\n  return deckWithoutCards;\r\n}\r\n\r\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param url\r\n *  the url for the requst.\r\n * @param options\r\n *  any options for fetch\r\n * @returns {Promise<Error|any>}\r\n *  a promise that resolves to the `json` data or an error.\r\n *  If the response is not in the 200 - 399 range the promise is rejected.\r\n */\r\nasync function fetchJson(url, options) {\r\n  try {\r\n    const response = await fetch(url, options);\r\n    if (response.status < 200 || response.status > 399) {\r\n      throw new Error(`${response.status} - ${response.statusText}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    if (error.name !== \"AbortError\") {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves all existing decks.\r\n * @returns {Promise<[deck]>}\r\n *  a promise that resolves to a possibly empty array of decks saved in the database.\r\n */\r\nexport async function listDecks(signal) {\r\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Saves deck to the database (public/data/db.json).\r\n * There is no validation done on the deck object, any object will be saved.\r\n * @param deck\r\n *  the deck to save, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<deck>}\r\n *  a promise that resolves the saved deck, which will now have an `id` property.\r\n */\r\nexport async function createDeck(deck, signal) {\r\n  const url = `${API_BASE_URL}/decks`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(deck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves the deck with the specified `deckId`\r\n * @param deckId\r\n *  the `id` property matching the desired deck.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<any>}\r\n *  a promise that resolves to the saved deck.\r\n */\r\nexport async function readDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedDeck\r\n *  the deck to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated deck.\r\n */\r\nexport async function updateDeck(updatedDeck, signal) {\r\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(updatedDeck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Deletes the deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the deck to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves all cards associated with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to a possible empty array of cards.\r\n */\r\nexport async function listCards(deckId, signal) {\r\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Creates a new card associated with the specified `deckId`.\r\n * There is no validation that there is an existing deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param card\r\n *  the card to create, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the new card, which will have an `id` property.\r\n */\r\nexport async function createCard(deckId, card, signal) {\r\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\r\n  // and the card is not related to the deck because the data types of the ID's are different.\r\n  const url = `${API_BASE_URL}/cards`;\r\n  card.deckId = Number(deckId);\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(card),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves the card with the specified `cardId`\r\n * @param cardId\r\n *  the id of the target\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the saved card.\r\n */\r\nexport async function readCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedCard\r\n *  the card to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated card.\r\n */\r\nexport async function updateCard(updatedCard, signal) {\r\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(updatedCard),\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Deletes the card with the specified `cardId`.\r\n * @param cardId\r\n *  the id of the card to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\n\r\nimport { listDecks, deleteDeck } from '../utils/api'\r\n\r\nexport default function Deck({ deck }) {\r\n  const [cardList, setCardList] = useState([])\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    listDecks().then((d) => {\r\n      const cards = d.find((d2) => d2.id === deck.id).cards\r\n      setCardList(cards)\r\n    })\r\n  }, [deck.id])\r\n\r\n  function deleteHandler(value) {\r\n    deleteDeck(value)\r\n    history.go(0)\r\n  }\r\n\r\n  const noOfCards = cardList && cardList.filter((card) => !card.cards).length\r\n\r\n  return (\r\n    <div className='card m-1'>\r\n      <div className='card-body'>\r\n        <div className='d-flex w-100 justify-content-between'>\r\n          <h5 className='card-title'>{deck.name}</h5>\r\n          <p className='text-muted'>{`${noOfCards} cards`}</p>\r\n        </div>\r\n        <p className='card-text'>{deck.description}</p>\r\n        <div className='buttons d-flex'>\r\n          <Link\r\n            to={`/decks/${deck.id}`}\r\n            type='button'\r\n            className='btn btn-secondary mr-2'\r\n          >\r\n            <i className='fas fa-eye'></i> View\r\n          </Link>\r\n          <Link\r\n            to={`/decks/${deck.id}/study`}\r\n            type='button'\r\n            className='btn btn-primary'\r\n          >\r\n            <i className='fas fa-book'></i> Study\r\n          </Link>\r\n          <button\r\n            type='button'\r\n            className='btn btn-danger ml-auto'\r\n            title='Delete'\r\n            onClick={() => {\r\n              if (window.confirm('Delete this deck?')) {\r\n                deleteHandler(deck.id, cardList)\r\n              }\r\n            }}\r\n          >\r\n            <i className='fas fa-trash-alt'></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { listDecks } from '../utils/api'\r\nimport Deck from './Deck'\r\n\r\nexport default function DeckList({ deckList, setDeckList }) {\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n\r\n    listDecks(abortController.signal).then(setDeckList)\r\n\r\n    return () => abortController.abort()\r\n  }, [])\r\n\r\n  const deckCardList =\r\n    deckList && deckList.map((deck) => <Deck key={deck.id} deck={deck} />)\r\n\r\n  return (\r\n    <main className='container mb-3'>\r\n      <Link to='decks/new'>\r\n        <button type='button' className='btn btn-secondary btn-lg m-1'>\r\n          <i className='fas fa-plus'></i> Create Deck\r\n        </button>\r\n      </Link>\r\n      <section className='column'>{deckCardList}</section>\r\n    </main>\r\n  )\r\n}","import React, { Fragment, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport default function StudyCardLogic(props) {\r\n  const { validCards } = props\r\n  const history = useHistory()\r\n  const [flipped, setFlipped] = useState(false)\r\n  const [selectedCard, setSelectedCard] = useState(0)\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-body'>\r\n        <h5 className='card-title'>\r\n          {'Card ' + Number(selectedCard + 1) + ' of ' + validCards.length}\r\n        </h5>\r\n        {!flipped ? (\r\n          <Fragment>\r\n            <p className='card-text'>{validCards[selectedCard].front}</p>\r\n            <button\r\n              type='button'\r\n              className='btn btn-secondary'\r\n              onClick={() => setFlipped(true)}\r\n            >\r\n              Flip\r\n            </button>\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>\r\n            <p className='card-text'>{validCards[selectedCard].back}</p>\r\n            <button\r\n              type='button'\r\n              className='btn btn-secondary mr-2'\r\n              onClick={() => setFlipped(false)}\r\n            >\r\n              Flip\r\n            </button>\r\n            <button\r\n              type='button'\r\n              className='btn btn-primary'\r\n              onClick={() => {\r\n                const nextCard = selectedCard + 1\r\n                if (validCards[nextCard]) {\r\n                  setSelectedCard(nextCard)\r\n                  setFlipped(false)\r\n                } else if (window.confirm('Restart Cards?')) {\r\n                  setSelectedCard(0)\r\n                  setFlipped(false)\r\n                } else {\r\n                  history.push('/')\r\n                }\r\n              }}\r\n            >\r\n              Next\r\n            </button>\r\n          </Fragment>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState, Fragment } from 'react'\r\nimport { useParams, Link } from 'react-router-dom'\r\n\r\nimport { readDeck } from '../utils/api'\r\nimport StudyCardLogic from './StudyCardLogic'\r\n\r\nexport default function StudyDeck({ selectedDeck, setSelectedDeck }) {\r\n  const [cardList, setCardList] = useState([])\r\n  const { deckId } = useParams()\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    readDeck(deckId, abortController.signal).then((deck) => {\r\n      setSelectedDeck(deck)\r\n      setCardList(deck.cards)\r\n    })\r\n\r\n    return () => abortController.abort()\r\n  }, [deckId])\r\n\r\n  const validCards = cardList && cardList.filter((card) => !card.cards)\r\n\r\n  return (\r\n    <Fragment>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item'>\r\n            <Link to='/'>\r\n              <i className='fas fa-home'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Study\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1>{'Study: ' + selectedDeck.name}</h1>\r\n      {cardList.length > 0 && validCards.length > 2 ? (\r\n        <StudyCardLogic validCards={validCards} />\r\n      ) : (\r\n        <Fragment>\r\n          <h3>Not enough cards.</h3>\r\n          <p>\r\n            {'You need at least 3 cards to study. There are ' +\r\n              validCards.length +\r\n              ' cards in the deck.'}\r\n          </p>\r\n          <Link to={`/decks/${selectedDeck.id}/cards/new`}>\r\n            <button type='button' className='btn btn-primary'>\r\n              <i className='fas fa-plus'></i> Add Cards\r\n            </button>\r\n          </Link>\r\n        </Fragment>\r\n      )}\r\n    </Fragment>\r\n  )\r\n}","import React from \"react\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"NotFound\">\r\n      <h1>Not Found</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"jumbotron bg-dark \">\r\n      <div className=\"container text-white\">\r\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\r\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect } from 'react'\r\nimport { useParams, Link, useHistory } from 'react-router-dom'\r\nimport { readDeck, updateDeck } from '../utils/api'\r\n\r\nexport default function EditDeck({ selectedDeck, setSelectedDeck }) {\r\n  const { deckId } = useParams()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    readDeck(deckId, abortController.signal).then(setSelectedDeck)\r\n\r\n    return () => abortController.abort()\r\n  }, [deckId])\r\n\r\n  const handleChange = ({ target }) => {\r\n    setSelectedDeck({\r\n      ...selectedDeck,\r\n      [target.name]: target.value,\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    updateDeck(selectedDeck)\r\n    history.push(`/decks/${deckId}`)\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item'>\r\n            <Link to='/'>\r\n              <i className='fas fa-home'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Edit Deck\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1>Edit Deck</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='name'>Name</label>\r\n          <textarea\r\n            className='form-control'\r\n            id='name'\r\n            type='text'\r\n            name='name'\r\n            onChange={handleChange}\r\n            value={selectedDeck.name}\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='description'>Description</label>\r\n          <textarea\r\n            className='form-control'\r\n            id='description'\r\n            type='text'\r\n            name='description'\r\n            onChange={handleChange}\r\n            value={selectedDeck.description}\r\n          />\r\n        </div>\r\n        <div className='buttons mb-3'>\r\n          <Link\r\n            to={`/decks/${selectedDeck.id}`}\r\n            type='button'\r\n            className='btn btn-secondary mr-2'\r\n          >\r\n            Cancel\r\n          </Link>\r\n          <button type='submit' className='btn btn-primary'>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams, Link, useHistory } from 'react-router-dom'\r\nimport { readDeck, deleteDeck, deleteCard } from '../utils/api'\r\n\r\nexport default function DisplayDeck() {\r\n  const [displayDeck, setDisplayDeck] = useState([])\r\n  const { deckId } = useParams()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    readDeck(deckId, abortController.signal).then(setDisplayDeck)\r\n\r\n    return () => abortController.abort()\r\n  }, [deckId])\r\n\r\n  const cardList = displayDeck && displayDeck.cards\r\n  const validCards = cardList && cardList.filter((card) => !card.cards)\r\n\r\n  function deleteDeckHandler(deck) {\r\n    deleteDeck(deck.id)\r\n    history.push('/')\r\n    history.go(0)\r\n  }\r\n\r\n  function deleteCardHandler(card) {\r\n    const id = card.id\r\n    deleteCard(id)\r\n    history.go(0)\r\n  }\r\n\r\n  const validCardList =\r\n    validCards &&\r\n    validCards.map((card, index) => (\r\n      <div className='card' key={index}>\r\n        <div className='card-body row'>\r\n          <div className='col-6'>\r\n            <p className='text-muted'>{card.front}</p>\r\n          </div>\r\n          <div className='col-6'>\r\n            <p className='text-muted'>{card.back}</p>\r\n          </div>\r\n          <br />\r\n          <div className='ml-auto'>\r\n            {/* Edit Card */}\r\n            <Link to={`/decks/${displayDeck.id}/cards/${card.id}/edit`}>\r\n              <button type='button' className='btn btn-secondary mr-2'>\r\n                <i className='fas fa-pencil-alt'></i> Edit\r\n              </button>\r\n            </Link>\r\n            {/* Delete Card */}\r\n            <button\r\n              type='button'\r\n              className='btn btn-danger'\r\n              title='Delete'\r\n              onClick={() => {\r\n                if (window.confirm('Delete this card?')) deleteCardHandler(card)\r\n              }}\r\n            >\r\n              <i className='fas fa-trash-alt'></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ))\r\n\r\n  return (\r\n    <div className='container'>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item'>\r\n            <Link to='/'>\r\n              <i className='fas fa-home'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            {displayDeck.name}\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <div>\r\n        <h3>{displayDeck.name}</h3>\r\n        <p>{displayDeck.description}</p>\r\n      </div>\r\n      <div className='d-flex'>\r\n        {/* Edit Deck */}\r\n        <Link to={`/decks/${displayDeck.id}/edit`}>\r\n          <button type='button' className='btn btn-secondary mr-2'>\r\n            <i className='fas fa-pencil-alt'></i> Edit\r\n          </button>\r\n        </Link>\r\n        {/* Study Deck */}\r\n        <Link to={`/decks/${displayDeck.id}/study`}>\r\n          <button type='button' className='btn btn-primary mr-2'>\r\n            <i className='fas fa-book'></i> Study\r\n          </button>\r\n        </Link>\r\n        {/* Add Cards */}\r\n        <Link to={`/decks/${displayDeck.id}/cards/new`}>\r\n          <button type='button' className='btn btn-primary'>\r\n            <i className='fas fa-plus'></i> Add Cards\r\n          </button>\r\n        </Link>\r\n        {/* Delete Deck */}\r\n        <button\r\n          type='button'\r\n          className='btn btn-danger ml-auto'\r\n          title='Delete'\r\n          onClick={() => {\r\n            if (window.confirm('Delete this deck?'))\r\n              deleteDeckHandler(displayDeck, cardList)\r\n          }}\r\n        >\r\n          <i className='fas fa-trash-alt'></i>\r\n        </button>\r\n      </div>\r\n      <br />\r\n      <div className='mb-3'>\r\n        <h2>Cards</h2>\r\n        <section className='column'>{validCardList}</section>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { useParams, Link, useHistory } from 'react-router-dom'\r\nimport { readCard, readDeck, updateCard } from '../utils/api'\r\n\r\nexport default function EditCard({ selectedDeck, setSelectedDeck }) {\r\n  const history = useHistory()\r\n  const [selectedCard, setSelectedCard] = useState([])\r\n  const { deckId, cardId } = useParams()\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    readDeck(deckId, abortController.signal).then((deck) => {\r\n      setSelectedDeck(deck)\r\n      readCard(cardId, abortController.signal).then(setSelectedCard)\r\n    })\r\n  }, [deckId, cardId])\r\n\r\n  const handleChange = ({ target }) => {\r\n    setSelectedCard({\r\n      ...selectedCard,\r\n      [target.name]: target.value,\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    updateCard(selectedCard)\r\n    history.push(`/decks/${selectedDeck.id}`)\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item'>\r\n            <Link to='/'>\r\n              <i className='fas fa-home'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            {'Edit Card ' + cardId}\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h3>Edit Card</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='front'>Front</label>\r\n          <textarea\r\n            className='form-control'\r\n            name='front'\r\n            id='front'\r\n            type='text'\r\n            value={selectedCard.front}\r\n            onChange={handleChange}\r\n          ></textarea>\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='back'>Back</label>\r\n          <textarea\r\n            className='form-control'\r\n            name='back'\r\n            id='back'\r\n            type='text'\r\n            value={selectedCard.back}\r\n            onChange={handleChange}\r\n          ></textarea>\r\n        </div>\r\n        <div className='buttons mb-3'>\r\n          <Link\r\n            to={`/decks/${selectedDeck.id}`}\r\n            className='btn btn-secondary mr-2'\r\n          >\r\n            Cancel\r\n          </Link>\r\n          <button type='submit' className='btn btn-primary'>\r\n            Save\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams, Link, useHistory } from 'react-router-dom'\r\nimport { readDeck, createCard } from '../utils/api'\r\n\r\nexport default function AddCard({ selectedDeck, setSelectedDeck }) {\r\n  const { deckId } = useParams()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController()\r\n    readDeck(deckId, abortController.signal).then(setSelectedDeck)\r\n\r\n    return () => abortController.abort()\r\n  }, [deckId])\r\n\r\n  const initialState = {\r\n    front: '',\r\n    back: '',\r\n  }\r\n\r\n  const [formData, setFormData] = useState({ ...initialState })\r\n  const handleChange = ({ target }) => {\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: target.value,\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    createCard(deckId, formData)\r\n    history.go(0)\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item'>\r\n            <Link to='/'>\r\n              <i className='fas fa-home'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            <Link to={`/decks/${selectedDeck.id}`}>{selectedDeck.name}</Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Add Card\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h3>{selectedDeck.name + ': Add Card'}</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='name'>Front</label>\r\n          <textarea\r\n            className='form-control'\r\n            name='front'\r\n            id='front'\r\n            placeholder='Front side of card'\r\n            onChange={handleChange}\r\n            value={formData.front}\r\n            required\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='description'>Back</label>\r\n          <textarea\r\n            className='form-control'\r\n            name='back'\r\n            id='back'\r\n            placeholder='Back side of card'\r\n            onChange={handleChange}\r\n            value={formData.back}\r\n            required\r\n          />\r\n        </div>\r\n        <div className='buttons mb-3'>\r\n          <Link\r\n            to={`/decks/${selectedDeck.id}`}\r\n            className='btn btn-secondary mr-2'\r\n          >\r\n            Done\r\n          </Link>\r\n          <button type='submit' className='btn btn-primary'>\r\n            Save\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport { useHistory, Link } from 'react-router-dom'\r\nimport { createDeck } from '../utils/api/index'\r\n\r\nexport default function CreateDeck({ deckList, createDeckHandler }) {\r\n  const history = useHistory()\r\n\r\n  const initialState = {\r\n    name: '',\r\n    description: '',\r\n  }\r\n\r\n  let lastDeck = deckList[deckList.length - 1]\r\n\r\n  const [formData, setFormData] = useState({ ...initialState })\r\n  const handleChange = ({ target }) => {\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: target.value,\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    const response = createDeck(formData)\r\n    createDeckHandler(response)\r\n    history.push(`/decks/${lastDeck.id + 1}`)\r\n    history.go(0)\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <nav aria-label='breadcrumb'>\r\n        <ol className='breadcrumb'>\r\n          <li className='breadcrumb-item'>\r\n            <Link to='/'>\r\n              <i className='fas fa-home'></i> Home\r\n            </Link>\r\n          </li>\r\n          <li className='breadcrumb-item active' aria-current='page'>\r\n            Create Deck\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <h1> Create Deck</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='form-group'>\r\n          <label htmlFor='name'>Name</label>\r\n          <input\r\n            className='form-control'\r\n            id='name'\r\n            type='text'\r\n            name='name'\r\n            placeholder='Deck Name'\r\n            onChange={handleChange}\r\n            value={formData.name}\r\n          />\r\n        </div>\r\n        <div className='form-group'>\r\n          <label htmlFor='description'>Description</label>\r\n\r\n          <textarea\r\n            className='form-control'\r\n            id='description'\r\n            type='text'\r\n            name='description'\r\n            placeholder='Brief description of the deck'\r\n            onChange={handleChange}\r\n            value={formData.description}\r\n          />\r\n        </div>\r\n        <div className='buttons mb-3'>\r\n          <button\r\n            type='button'\r\n            className='btn btn-secondary mr-2'\r\n            onClick={() => history.push('/')}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button type='submit' className='btn btn-primary'>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport Home from '../Decks/DeckList'\r\nimport StudyDeck from '../Decks/StudyDeck'\r\nimport NotFound from './NotFound'\r\nimport Header from './Header'\r\nimport DeckEdit from '../Decks/EditDeck'\r\nimport DeckView from '../Decks/DisplayDeck'\r\nimport CardEdit from '../Cards/EditCard'\r\nimport CardCreate from '../Cards/AddCard'\r\nimport DeckCreate from '../Decks/CreateDeck'\r\n\r\nfunction Layout() {\r\n  const [deckList, setDeckList] = useState([])\r\n  const [selectedDeck, setSelectedDeck] = useState([])\r\n\r\n  const createDeckHandler = (newDeck) => {\r\n    setDeckList([...deckList, newDeck])\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className='container'>\r\n        <Switch>\r\n          <Route path='/decks/new'>\r\n            <DeckCreate\r\n              deckList={deckList}\r\n              createDeckHandler={createDeckHandler}\r\n            />\r\n          </Route>\r\n          <Route path='/decks/:deckId/study'>\r\n            <StudyDeck\r\n              selectedDeck={selectedDeck}\r\n              setSelectedDeck={setSelectedDeck}\r\n            />\r\n          </Route>\r\n          <Route path='/decks/:deckId/edit'>\r\n            <DeckEdit\r\n              selectedDeck={selectedDeck}\r\n              setSelectedDeck={setSelectedDeck}\r\n            />\r\n          </Route>\r\n          <Route path='/decks/:deckId/cards/new'>\r\n            <CardCreate\r\n              selectedDeck={selectedDeck}\r\n              setSelectedDeck={setSelectedDeck}\r\n            />\r\n          </Route>\r\n          <Route path='/decks/:deckId/cards/:cardId/edit'>\r\n            <CardEdit\r\n              selectedDeck={selectedDeck}\r\n              setSelectedDeck={setSelectedDeck}\r\n            />\r\n          </Route>\r\n          <Route exact={true} path='/decks/:deckId'>\r\n            <DeckView />\r\n          </Route>\r\n          <Route exact={true} path='/decks'>\r\n            <Redirect to='/' />\r\n          </Route>\r\n          <Route exact={true} path='/'>\r\n            <Home deckList={deckList} setDeckList={setDeckList} />\r\n          </Route>\r\n          <Route>\r\n            <NotFound />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Layout from \"./Layout\";\r\n\r\n\r\n\r\n/**\r\n * App is a wrapper for <Layout>, you should not need to change this file.\r\n */\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app-routes\">\r\n      <Switch>\r\n        <Route  path=\"/\">\r\n          <Layout/>\r\n        </Route>\r\n        <Route></Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n   \r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport 'tachyons'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}